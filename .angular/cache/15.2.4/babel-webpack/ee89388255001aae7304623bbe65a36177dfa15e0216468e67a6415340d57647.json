{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./services/auth.service\";\nexport class LoggedInGuard {\n  canActivate(route, state) {\n    const isLoggedIn = this.authService.isLogged();\n    if (!isLoggedIn) {\n      this.router.navigate(['home']);\n    }\n    return isLoggedIn;\n  }\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n}\nLoggedInGuard.ɵfac = function LoggedInGuard_Factory(t) {\n  return new (t || LoggedInGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nLoggedInGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoggedInGuard,\n  factory: LoggedInGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,aAAa;EAExBC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,MAAMC,UAAU,GAAG,IAAI,CAACC,WAAW,CAACC,QAAQ,EAAE;IAC9C,IAAG,CAACF,UAAU,EAAC;MACb,IAAI,CAACG,MAAM,CAACC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;;IAEhC,OAAOJ,UAAU;EACnB;EAEAK,YACUF,MAAc,EACfF,WAAwB;IADvB,WAAM,GAANE,MAAM;IACP,gBAAW,GAAXF,WAAW;EAAe;;AAdxBL,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAU,SAAbV,aAAa;EAAAW,YAFZ;AAAM","names":["LoggedInGuard","canActivate","route","state","isLoggedIn","authService","isLogged","router","navigate","constructor","factory","providedIn"],"sourceRoot":"","sources":["/Users/giulia/Documents/Progetti/cibando/client/src/app/logged-in.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { AuthService } from './services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggedInGuard implements CanActivate {\n \n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const isLoggedIn = this.authService.isLogged();\n    if(!isLoggedIn){\n      this.router.navigate(['home']);\n    }\n    return isLoggedIn;\n  }\n\n  constructor(\n    private router: Router,\n    public authService: AuthService){}\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}